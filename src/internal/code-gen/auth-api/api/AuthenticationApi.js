/**
 * Authorization API
 * Authorization API
 *
 * OpenAPI spec version: 9.0.000.00.711
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/AuthSchemeLookupData', 'model/ChangePasswordOperation', 'model/CloudUserDetails', 'model/DefaultOAuth2AccessToken', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/AuthSchemeLookupData'), require('../model/ChangePasswordOperation'), require('../model/CloudUserDetails'), require('../model/DefaultOAuth2AccessToken'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.AuthorizationApi) {
      root.AuthorizationApi = {};
    }
    root.AuthorizationApi.AuthenticationApi = factory(root.AuthorizationApi.ApiClient, root.AuthorizationApi.ApiResponse, root.AuthorizationApi.AuthSchemeLookupData, root.AuthorizationApi.ChangePasswordOperation, root.AuthorizationApi.CloudUserDetails, root.AuthorizationApi.DefaultOAuth2AccessToken, root.AuthorizationApi.ErrorResponse);
  }
}(this, function(ApiClient, ApiResponse, AuthSchemeLookupData, ChangePasswordOperation, CloudUserDetails, DefaultOAuth2AccessToken, ErrorResponse) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 9.0.000.00.711
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Endpoint to perform authorization
     * See &#39;authorize&#39; endpoint: https://tools.ietf.org/html/rfc6749   Please note that we support only &#39;*&#39; scope. The usage of scope is optional. Please note, that set of parameters and their meanings depend on grant/response type.
     * @param {module:model/String} responseType Response type, see https://tools.ietf.org/html/rfc6749#section-3.1.1
     * @param {String} redirectUri Redirect URI - will be the part of URL returned in &#39;Location&#39; header
     * @param {String} clientId Client ID (id of application/service registered as client)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {module:model/String} opts.scope Scope
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.authorizeWithHttpInfo = function(responseType, redirectUri, clientId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling authorize");
      }

      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorize");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorize");
      }


      var pathParams = {
      };
      var queryParams = {
        'response_type': responseType,
        'scope': opts['scope'],
        'redirect_uri': redirectUri,
        'client_id': clientId
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/oauth/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Endpoint to perform authorization
     * See &#39;authorize&#39; endpoint: https://tools.ietf.org/html/rfc6749   Please note that we support only &#39;*&#39; scope. The usage of scope is optional. Please note, that set of parameters and their meanings depend on grant/response type.
     * @param {module:model/String} responseType Response type, see https://tools.ietf.org/html/rfc6749#section-3.1.1
     * @param {String} redirectUri Redirect URI - will be the part of URL returned in &#39;Location&#39; header
     * @param {String} clientId Client ID (id of application/service registered as client)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {module:model/String} opts.scope Scope
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.authorize = function(responseType, redirectUri, clientId, opts) {
      return this.authorizeWithHttpInfo(responseType, redirectUri, clientId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change password
     * Change user&#39;s password
     * @param {module:model/ChangePasswordOperation} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    this.changePasswordWithHttpInfo = function(request) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling changePassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change password
     * Change user&#39;s password
     * @param {module:model/ChangePasswordOperation} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    this.changePassword = function(request) {
      return this.changePasswordWithHttpInfo(request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user principal by OAUTH token
     * This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
     * @param {String} authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CloudUserDetails} and HTTP response
     */
    this.getInfoWithHttpInfo = function(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CloudUserDetails;

      return this.apiClient.callApi(
        '/userinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get user principal by OAUTH token
     * This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
     * @param {String} authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CloudUserDetails}
     */
    this.getInfo = function(authorization) {
      return this.getInfoWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Endpoint to retrieve token
     * See &#39;token&#39; endpoint: https://tools.ietf.org/html/rfc6749   Please note that we support only &#39;*&#39; scope. The usage of scope is optional
     * @param {module:model/String} grantType Grant type
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {String} opts.accept Media types which are acceptable for the response. Example: &#39;Accept: application/json&#39;
     * @param {module:model/String} opts.scope Scope
     * @param {String} opts.clientId Client ID
     * @param {String} opts.username End-User user name
     * @param {String} opts.password End-User password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DefaultOAuth2AccessToken} and HTTP response
     */
    this.retrieveTokenWithHttpInfo = function(grantType, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling retrieveToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept']
      };
      var formParams = {
        'grant_type': grantType,
        'scope': opts['scope'],
        'client_id': opts['clientId'],
        'username': opts['username'],
        'password': opts['password']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DefaultOAuth2AccessToken;

      return this.apiClient.callApi(
        '/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Endpoint to retrieve token
     * See &#39;token&#39; endpoint: https://tools.ietf.org/html/rfc6749   Please note that we support only &#39;*&#39; scope. The usage of scope is optional
     * @param {module:model/String} grantType Grant type
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {String} opts.accept Media types which are acceptable for the response. Example: &#39;Accept: application/json&#39;
     * @param {module:model/String} opts.scope Scope
     * @param {String} opts.clientId Client ID
     * @param {String} opts.username End-User user name
     * @param {String} opts.password End-User password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DefaultOAuth2AccessToken}
     */
    this.retrieveToken = function(grantType, opts) {
      return this.retrieveTokenWithHttpInfo(grantType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Form-based authentication
     * Endpoint to perform form-based authentication
     * @param {String} username User name - should be in the format of &#39;tenant\\username&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.password password
     * @param {Boolean} opts.saml Flag indicating saml login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.signInWithHttpInfo = function(username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling signIn");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'username': username,
        'password': opts['password'],
        'saml': opts['saml']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sign-in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Form-based authentication
     * Endpoint to perform form-based authentication
     * @param {String} username User name - should be in the format of &#39;tenant\\username&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.password password
     * @param {Boolean} opts.saml Flag indicating saml login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.signIn = function(username, opts) {
      return this.signInWithHttpInfo(username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sign-out user
     * This endpoint is called by oAuth2 clients to Sign-out user
     * @param {String} authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.global If set all tokens for current user will be invalidated, otherwise only current token will be invalidated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    this.signOutWithHttpInfo = function(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling signOut");
      }


      var pathParams = {
      };
      var queryParams = {
        'global': opts['global']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/sign-out', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sign-out user
     * This endpoint is called by oAuth2 clients to Sign-out user
     * @param {String} authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.global If set all tokens for current user will be invalidated, otherwise only current token will be invalidated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    this.signOut = function(authorization, opts) {
      return this.signOutWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get authentication scheme
     * Get authentication scheme by user name or tenant name.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthSchemeLookupData} opts.lookupData Data for scheme lookup.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    this.tenantInfoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['lookupData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/auth-scheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get authentication scheme
     * Get authentication scheme by user name or tenant name.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthSchemeLookupData} opts.lookupData Data for scheme lookup.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    this.tenantInfo = function(opts) {
      return this.tenantInfoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
