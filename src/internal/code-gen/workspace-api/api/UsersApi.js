/**
 * Workspace API
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/ApiSuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.UsersApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Search for users by specific group ID
     * @param {Number} groupId The id of the group to get users for
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm The text to search for
     * @param {String} opts.sort Desired sort order (asc or desc). asc if not specified
     * @param {Number} opts.limit Number of results. 100 if not specified.
     * @param {Number} opts.offset Offset of page to start from. 0 if not specified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.getGroupUsersWithHttpInfo = function(groupId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupUsers");
      }


      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
        'sort': opts['sort'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/groups/{groupId}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search for users by specific group ID
     * @param {Number} groupId The id of the group to get users for
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm The text to search for
     * @param {String} opts.sort Desired sort order (asc or desc). asc if not specified
     * @param {Number} opts.limit Number of results. 100 if not specified.
     * @param {Number} opts.offset Offset of page to start from. 0 if not specified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.getGroupUsers = function(groupId, opts) {
      return this.getGroupUsersWithHttpInfo(groupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for users
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm The text to search for
     * @param {String} opts.sort Desired sort order (asc or desc). asc if not specified
     * @param {Number} opts.limit Number of results. 100 if not specified.
     * @param {Number} opts.offset Offset of page to start from. 0 if not specified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.getUsersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
        'sort': opts['sort'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search for users
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm The text to search for
     * @param {String} opts.sort Desired sort order (asc or desc). asc if not specified
     * @param {Number} opts.limit Number of results. 100 if not specified.
     * @param {Number} opts.offset Offset of page to start from. 0 if not specified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.getUsers = function(opts) {
      return this.getUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
