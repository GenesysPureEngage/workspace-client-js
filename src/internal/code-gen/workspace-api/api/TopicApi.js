/**
 * Workspace API
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.40.2832
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/ApiSuccessResponse', 'model/PublishEventData', 'model/SubscribeTopicData', 'model/UnsubscribeTopicData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/PublishEventData'), require('../model/SubscribeTopicData'), require('../model/UnsubscribeTopicData'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.TopicApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.PublishEventData, root.WorkspaceApi.SubscribeTopicData, root.WorkspaceApi.UnsubscribeTopicData);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse, PublishEventData, SubscribeTopicData, UnsubscribeTopicData) {
  'use strict';

  /**
   * Topic service.
   * @module api/TopicApi
   * @version 9.0.000.40.2832
   */

  /**
   * Constructs a new TopicApi. 
   * @alias module:api/TopicApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Publish an user event regarding specific topic
     * Publish a user event on interaction server channel regarding specific topic.
     * @param {String} topic The specific topic
     * @param {module:model/PublishEventData} publishEventData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.publishTopicWithHttpInfo = function(topic, publishEventData) {
      var postBody = publishEventData;

      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling publishTopic");
      }

      // verify the required parameter 'publishEventData' is set
      if (publishEventData === undefined || publishEventData === null) {
        throw new Error("Missing the required parameter 'publishEventData' when calling publishTopic");
      }


      var pathParams = {
        'topic': topic
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/topics/{topic}/publish', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Publish an user event regarding specific topic
     * Publish a user event on interaction server channel regarding specific topic.
     * @param {String} topic The specific topic
     * @param {module:model/PublishEventData} publishEventData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.publishTopic = function(topic, publishEventData) {
      return this.publishTopicWithHttpInfo(topic, publishEventData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * subscribe to receive user events regarding specific topic(s).
     * subscribe to receive user events regarding specific topic(s) from interaction server.
     * @param {module:model/SubscribeTopicData} subscribeTopicData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.subscribeTopicWithHttpInfo = function(subscribeTopicData) {
      var postBody = subscribeTopicData;

      // verify the required parameter 'subscribeTopicData' is set
      if (subscribeTopicData === undefined || subscribeTopicData === null) {
        throw new Error("Missing the required parameter 'subscribeTopicData' when calling subscribeTopic");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/topics/subscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * subscribe to receive user events regarding specific topic(s).
     * subscribe to receive user events regarding specific topic(s) from interaction server.
     * @param {module:model/SubscribeTopicData} subscribeTopicData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.subscribeTopic = function(subscribeTopicData) {
      return this.subscribeTopicWithHttpInfo(subscribeTopicData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * unsubscribe to receive user events regarding specific topic(s).
     * unsubscribe to receive user events regarding specific topic(s) from interaction server.
     * @param {module:model/UnsubscribeTopicData} unsubscribeTopicData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.unsubscribeTopicWithHttpInfo = function(unsubscribeTopicData) {
      var postBody = unsubscribeTopicData;

      // verify the required parameter 'unsubscribeTopicData' is set
      if (unsubscribeTopicData === undefined || unsubscribeTopicData === null) {
        throw new Error("Missing the required parameter 'unsubscribeTopicData' when calling unsubscribeTopic");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/topics/unsubscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * unsubscribe to receive user events regarding specific topic(s).
     * unsubscribe to receive user events regarding specific topic(s) from interaction server.
     * @param {module:model/UnsubscribeTopicData} unsubscribeTopicData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.unsubscribeTopic = function(unsubscribeTopicData) {
      return this.unsubscribeTopicWithHttpInfo(unsubscribeTopicData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
