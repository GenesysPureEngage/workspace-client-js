/**
 * Workspace API
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AcceptData', 'model/AcceptData1', 'model/AcceptData2', 'model/AcceptData3', 'model/AcceptData4', 'model/AcceptData5', 'model/AcceptData7', 'model/AddCommentData', 'model/AddContentData', 'model/ApiErrorResponse', 'model/ApiSuccessResponse', 'model/ConsultData', 'model/ConsultData1', 'model/InviteData', 'model/InviteData1', 'model/LeaveData', 'model/LogoutMediaData', 'model/NotReadyForMediaData', 'model/PlaceInQueueData', 'model/ReadyForMediaData', 'model/RejectData', 'model/TransferData', 'model/UserData', 'model/UserData2'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AcceptData'), require('../model/AcceptData1'), require('../model/AcceptData2'), require('../model/AcceptData3'), require('../model/AcceptData4'), require('../model/AcceptData5'), require('../model/AcceptData7'), require('../model/AddCommentData'), require('../model/AddContentData'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/ConsultData'), require('../model/ConsultData1'), require('../model/InviteData'), require('../model/InviteData1'), require('../model/LeaveData'), require('../model/LogoutMediaData'), require('../model/NotReadyForMediaData'), require('../model/PlaceInQueueData'), require('../model/ReadyForMediaData'), require('../model/RejectData'), require('../model/TransferData'), require('../model/UserData'), require('../model/UserData2'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.MediaApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.AcceptData, root.WorkspaceApi.AcceptData1, root.WorkspaceApi.AcceptData2, root.WorkspaceApi.AcceptData3, root.WorkspaceApi.AcceptData4, root.WorkspaceApi.AcceptData5, root.WorkspaceApi.AcceptData7, root.WorkspaceApi.AddCommentData, root.WorkspaceApi.AddContentData, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.ConsultData, root.WorkspaceApi.ConsultData1, root.WorkspaceApi.InviteData, root.WorkspaceApi.InviteData1, root.WorkspaceApi.LeaveData, root.WorkspaceApi.LogoutMediaData, root.WorkspaceApi.NotReadyForMediaData, root.WorkspaceApi.PlaceInQueueData, root.WorkspaceApi.ReadyForMediaData, root.WorkspaceApi.RejectData, root.WorkspaceApi.TransferData, root.WorkspaceApi.UserData, root.WorkspaceApi.UserData2);
  }
}(this, function(ApiClient, AcceptData, AcceptData1, AcceptData2, AcceptData3, AcceptData4, AcceptData5, AcceptData7, AddCommentData, AddContentData, ApiErrorResponse, ApiSuccessResponse, ConsultData, ConsultData1, InviteData, InviteData1, LeaveData, LogoutMediaData, NotReadyForMediaData, PlaceInQueueData, ReadyForMediaData, RejectData, TransferData, UserData, UserData2) {
  'use strict';

  /**
   * Media service.
   * @module api/MediaApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MediaApi. 
   * @alias module:api/MediaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Accept an open-media interaction
     * Accept the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to accept
     * @param {String} id id of interaction to accept
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData7} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.acceptWithHttpInfo = function(mediatype, id, opts) {
      opts = opts || {};
      var postBody = opts['acceptData'];

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling accept");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accept");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/accept', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Accept an open-media interaction
     * Accept the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to accept
     * @param {String} id id of interaction to accept
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData7} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.accept = function(mediatype, id, opts) {
      return this.acceptWithHttpInfo(mediatype, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accept a chat interaction
     * Accept the interaction specified in the id path parameter
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.acceptChatWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['acceptData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceptChat");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/accept', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Accept a chat interaction
     * Accept the interaction specified in the id path parameter
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.acceptChat = function(id, opts) {
      return this.acceptChatWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an attachment to the open-media interaction
     * Add an attachment to the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to add attachment
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {File} opts.attachment The file to upload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.addAttachmentWithHttpInfo = function(mediatype, id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling addAttachment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAttachment");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'attachment': opts['attachment']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/add-attachment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an attachment to the open-media interaction
     * Add an attachment to the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to add attachment
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {File} opts.attachment The file to upload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.addAttachment = function(mediatype, id, opts) {
      return this.addAttachmentWithHttpInfo(mediatype, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the comment for the interaction
     * Set the comment for the interaction
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/AddCommentData} addCommentData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.addCommentWithHttpInfo = function(mediatype, id, addCommentData) {
      var postBody = addCommentData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling addComment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addComment");
      }

      // verify the required parameter 'addCommentData' is set
      if (addCommentData === undefined || addCommentData === null) {
        throw new Error("Missing the required parameter 'addCommentData' when calling addComment");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/add-comment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set the comment for the interaction
     * Set the comment for the interaction
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/AddCommentData} addCommentData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.addComment = function(mediatype, id, addCommentData) {
      return this.addCommentWithHttpInfo(mediatype, id, addCommentData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create the interaction in UCS database
     * Create the interaction in UCS database
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AddContentData} opts.addContentData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.addContentWithHttpInfo = function(mediatype, id, opts) {
      opts = opts || {};
      var postBody = opts['addContentData'];

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling addContent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addContent");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/add-content', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create the interaction in UCS database
     * Create the interaction in UCS database
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AddContentData} opts.addContentData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.addContent = function(mediatype, id, opts) {
      return this.addContentWithHttpInfo(mediatype, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign the contact to the open interaction
     * Assign the contact to the open interaction specified in the contactId path parameter
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of interaction
     * @param {String} contactId id of contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.assignContactWithHttpInfo = function(mediatype, id, contactId) {
      var postBody = null;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling assignContact");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling assignContact");
      }

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling assignContact");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id,
        'contactId': contactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/assign-contact/{contactId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Assign the contact to the open interaction
     * Assign the contact to the open interaction specified in the contactId path parameter
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of interaction
     * @param {String} contactId id of contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.assignContact = function(mediatype, id, contactId) {
      return this.assignContactWithHttpInfo(mediatype, id, contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Attach user data to the interaction
     * Attach the interaction userdata with the provided key/value pairs.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/UserData} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.attachMediaUserDataWithHttpInfo = function(mediatype, id, userData) {
      var postBody = userData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling attachMediaUserData");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachMediaUserData");
      }

      // verify the required parameter 'userData' is set
      if (userData === undefined || userData === null) {
        throw new Error("Missing the required parameter 'userData' when calling attachMediaUserData");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/attach-user-data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Attach user data to the interaction
     * Attach the interaction userdata with the provided key/value pairs.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/UserData} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.attachMediaUserData = function(mediatype, id, userData) {
      return this.attachMediaUserDataWithHttpInfo(mediatype, id, userData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the attachment of the interaction
     * Get the attachment of the interaction specified in the documentId path parameter
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of interaction
     * @param {String} documentId id of document to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.attachmentsWithHttpInfo = function(mediatype, id, documentId) {
      var postBody = null;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling attachments");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachments");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling attachments");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id,
        'documentId': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/attachments/{documentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the attachment of the interaction
     * Get the attachment of the interaction specified in the documentId path parameter
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of interaction
     * @param {String} documentId id of document to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.attachments = function(mediatype, id, documentId) {
      return this.attachmentsWithHttpInfo(mediatype, id, documentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Complete open-media interaction
     * Complete the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to complete
     * @param {String} id id of interaction to complete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.completeWithHttpInfo = function(mediatype, id) {
      var postBody = null;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling complete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling complete");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/complete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Complete open-media interaction
     * Complete the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to complete
     * @param {String} id id of interaction to complete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.complete = function(mediatype, id) {
      return this.completeWithHttpInfo(mediatype, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Consult other agent during the chat
     * consult other agent during the chat
     * @param {String} id id of the interaction
     * @param {module:model/ConsultData} consultData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.consultWithHttpInfo = function(id, consultData) {
      var postBody = consultData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling consult");
      }

      // verify the required parameter 'consultData' is set
      if (consultData === undefined || consultData === null) {
        throw new Error("Missing the required parameter 'consultData' when calling consult");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/consult', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Consult other agent during the chat
     * consult other agent during the chat
     * @param {String} id id of the interaction
     * @param {module:model/ConsultData} consultData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.consult = function(id, consultData) {
      return this.consultWithHttpInfo(id, consultData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Consult a target defines in attached data
     * Consult a target defines in attached data
     * @param {String} id id of the interaction
     * @param {module:model/ConsultData1} consultData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.consultByQueueWithHttpInfo = function(id, consultData) {
      var postBody = consultData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling consultByQueue");
      }

      // verify the required parameter 'consultData' is set
      if (consultData === undefined || consultData === null) {
        throw new Error("Missing the required parameter 'consultData' when calling consultByQueue");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/consult-by-queue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Consult a target defines in attached data
     * Consult a target defines in attached data
     * @param {String} id id of the interaction
     * @param {module:model/ConsultData1} consultData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.consultByQueue = function(id, consultData) {
      return this.consultByQueueWithHttpInfo(id, consultData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove key/value pair from user data
     * Deletes the specified key from the interaction data.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/UserData2} userData The keys of the key/value pairs to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.deleteMediaUserDataWithHttpInfo = function(mediatype, id, userData) {
      var postBody = userData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling deleteMediaUserData");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMediaUserData");
      }

      // verify the required parameter 'userData' is set
      if (userData === undefined || userData === null) {
        throw new Error("Missing the required parameter 'userData' when calling deleteMediaUserData");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/delete-user-data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove key/value pair from user data
     * Deletes the specified key from the interaction data.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/UserData2} userData The keys of the key/value pairs to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.deleteMediaUserData = function(mediatype, id, userData) {
      return this.deleteMediaUserDataWithHttpInfo(mediatype, id, userData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Turn off do not disturb for open media channel
     * Turn off do not disturb for open media channel
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.dndOffWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/dnd-off', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Turn off do not disturb for open media channel
     * Turn off do not disturb for open media channel
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.dndOff = function() {
      return this.dndOffWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Turn on do not disturb for open media channels
     * Turn on do not disturb for open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.dndOnWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/dnd-on', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Turn on do not disturb for open media channels
     * Turn on do not disturb for open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.dndOn = function() {
      return this.dndOnWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Invite other agent to join the chat
     * Invite other agent to join the chat
     * @param {String} id id of the interaction
     * @param {module:model/InviteData} inviteData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.inviteWithHttpInfo = function(id, inviteData) {
      var postBody = inviteData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invite");
      }

      // verify the required parameter 'inviteData' is set
      if (inviteData === undefined || inviteData === null) {
        throw new Error("Missing the required parameter 'inviteData' when calling invite");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/invite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Invite other agent to join the chat
     * Invite other agent to join the chat
     * @param {String} id id of the interaction
     * @param {module:model/InviteData} inviteData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.invite = function(id, inviteData) {
      return this.inviteWithHttpInfo(id, inviteData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * inviite a target defines in attached data
     * invite a target defines in attached data
     * @param {String} id id of the interaction
     * @param {module:model/InviteData1} inviteData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.inviteByQueueWithHttpInfo = function(id, inviteData) {
      var postBody = inviteData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling inviteByQueue");
      }

      // verify the required parameter 'inviteData' is set
      if (inviteData === undefined || inviteData === null) {
        throw new Error("Missing the required parameter 'inviteData' when calling inviteByQueue");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/invite-by-queue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * inviite a target defines in attached data
     * invite a target defines in attached data
     * @param {String} id id of the interaction
     * @param {module:model/InviteData1} inviteData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.inviteByQueue = function(id, inviteData) {
      return this.inviteByQueueWithHttpInfo(id, inviteData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Leave a chat interaction
     * Leave the interaction specified in the id path parameter
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/LeaveData} opts.leaveData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.leaveChatWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['leaveData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leaveChat");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/leave', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Leave a chat interaction
     * Leave the interaction specified in the id path parameter
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/LeaveData} opts.leaveData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.leaveChat = function(id, opts) {
      return this.leaveChatWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Logout all open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.logoutAgentStateWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/logout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Logout all open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.logoutAgentState = function() {
      return this.logoutAgentStateWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change to the not ready state for all open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.notReadyAgentStateWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/not-ready', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change to the not ready state for all open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.notReadyAgentState = function() {
      return this.notReadyAgentStateWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change to the not ready state for open media channel
     * Change to the not ready state for open media channel
     * @param {String} mediatype 
     * @param {module:model/NotReadyForMediaData} notReadyForMediaData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.notReadyForMediaWithHttpInfo = function(mediatype, notReadyForMediaData) {
      var postBody = notReadyForMediaData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling notReadyForMedia");
      }

      // verify the required parameter 'notReadyForMediaData' is set
      if (notReadyForMediaData === undefined || notReadyForMediaData === null) {
        throw new Error("Missing the required parameter 'notReadyForMediaData' when calling notReadyForMedia");
      }


      var pathParams = {
        'mediatype': mediatype
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/not-ready', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change to the not ready state for open media channel
     * Change to the not ready state for open media channel
     * @param {String} mediatype 
     * @param {module:model/NotReadyForMediaData} notReadyForMediaData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.notReadyForMedia = function(mediatype, notReadyForMediaData) {
      return this.notReadyForMediaWithHttpInfo(mediatype, notReadyForMediaData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Place the interaction in queue
     * Place the interaction in queue with modification of properties pairs.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/PlaceInQueueData} placeInQueueData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.placeInQueueWithHttpInfo = function(mediatype, id, placeInQueueData) {
      var postBody = placeInQueueData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling placeInQueue");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling placeInQueue");
      }

      // verify the required parameter 'placeInQueueData' is set
      if (placeInQueueData === undefined || placeInQueueData === null) {
        throw new Error("Missing the required parameter 'placeInQueueData' when calling placeInQueue");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/place-in-queue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Place the interaction in queue
     * Place the interaction in queue with modification of properties pairs.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/PlaceInQueueData} placeInQueueData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.placeInQueue = function(mediatype, id, placeInQueueData) {
      return this.placeInQueueWithHttpInfo(mediatype, id, placeInQueueData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change to the ready state for all open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.readyAgentStateWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/ready', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change to the ready state for all open media channels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.readyAgentState = function() {
      return this.readyAgentStateWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change to the ready state for open media channel
     * Change to the ready state for open media channel
     * @param {String} mediatype 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReadyForMediaData} opts.readyForMediaData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.readyForMediaWithHttpInfo = function(mediatype, opts) {
      opts = opts || {};
      var postBody = opts['readyForMediaData'];

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling readyForMedia");
      }


      var pathParams = {
        'mediatype': mediatype
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/ready', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change to the ready state for open media channel
     * Change to the ready state for open media channel
     * @param {String} mediatype 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReadyForMediaData} opts.readyForMediaData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.readyForMedia = function(mediatype, opts) {
      return this.readyForMediaWithHttpInfo(mediatype, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reject an open-media interaction
     * Reject the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to reject
     * @param {String} id id of interaction to reject
     * @param {Object} opts Optional parameters
     * @param {module:model/RejectData} opts.rejectData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.rejectWithHttpInfo = function(mediatype, id, opts) {
      opts = opts || {};
      var postBody = opts['rejectData'];

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling reject");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reject");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/reject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reject an open-media interaction
     * Reject the interaction specified in the id path parameter
     * @param {String} mediatype media-type of interaction to reject
     * @param {String} id id of interaction to reject
     * @param {Object} opts Optional parameters
     * @param {module:model/RejectData} opts.rejectData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.reject = function(mediatype, id, opts) {
      return this.rejectWithHttpInfo(mediatype, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the attachment of the open-media interaction
     * Remove the attachment of the interaction specified in the documentId path parameter
     * @param {String} mediatype media-type of interaction to remove attachment
     * @param {String} id id of interaction
     * @param {String} documentId id of document to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.removeAttachmentWithHttpInfo = function(mediatype, id, documentId) {
      var postBody = null;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling removeAttachment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeAttachment");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling removeAttachment");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id,
        'documentId': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/remove-attachment/{documentId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove the attachment of the open-media interaction
     * Remove the attachment of the interaction specified in the documentId path parameter
     * @param {String} mediatype media-type of interaction to remove attachment
     * @param {String} id id of interaction
     * @param {String} documentId id of document to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.removeAttachment = function(mediatype, id, documentId) {
      return this.removeAttachmentWithHttpInfo(mediatype, id, documentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Logout the open media channel
     * Logout the open media channel
     * @param {String} mediatype 
     * @param {module:model/LogoutMediaData} logoutMediaData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.removeMediaWithHttpInfo = function(mediatype, logoutMediaData) {
      var postBody = logoutMediaData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling removeMedia");
      }

      // verify the required parameter 'logoutMediaData' is set
      if (logoutMediaData === undefined || logoutMediaData === null) {
        throw new Error("Missing the required parameter 'logoutMediaData' when calling removeMedia");
      }


      var pathParams = {
        'mediatype': mediatype
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/logout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Logout the open media channel
     * Logout the open media channel
     * @param {String} mediatype 
     * @param {module:model/LogoutMediaData} logoutMediaData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.removeMedia = function(mediatype, logoutMediaData) {
      return this.removeMediaWithHttpInfo(mediatype, logoutMediaData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send custom notification to the specified chat
     * Send custom notification to the specified chat
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData5} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.sendCustomNotificationWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['acceptData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendCustomNotification");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/send-custom-notification', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send custom notification to the specified chat
     * Send custom notification to the specified chat
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData5} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.sendCustomNotification = function(id, opts) {
      return this.sendCustomNotificationWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a message to the specified chat
     * Send a message to the specified chat
     * @param {String} id id of interaction to send a message to
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData1} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.sendMessageWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['acceptData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendMessage");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/send-message', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a message to the specified chat
     * Send a message to the specified chat
     * @param {String} id id of interaction to send a message to
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData1} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.sendMessage = function(id, opts) {
      return this.sendMessageWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send notification that typing started to the specified chat
     * Send notification that typing started to the specified chat
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData3} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.sendTypingStartedWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['acceptData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendTypingStarted");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/send-typing-started', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send notification that typing started to the specified chat
     * Send notification that typing started to the specified chat
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData3} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.sendTypingStarted = function(id, opts) {
      return this.sendTypingStartedWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send notification that typing stopped to the specified chat
     * Send notification that typing stoppped to the specified chat
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData4} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.sendTypingStoppedWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['acceptData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendTypingStopped");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/send-typing-stopped', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send notification that typing stopped to the specified chat
     * Send notification that typing stoppped to the specified chat
     * @param {String} id id of interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData4} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.sendTypingStopped = function(id, opts) {
      return this.sendTypingStoppedWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a url to the specified chat
     * Send a url to the specified chat
     * @param {String} id id of interaction to send a url to
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData2} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.sendUrlDataWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['acceptData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendUrlData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/chat/interactions/{id}/send-url', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a url to the specified chat
     * Send a url to the specified chat
     * @param {String} id id of interaction to send a url to
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptData2} opts.acceptData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.sendUrlData = function(id, opts) {
      return this.sendUrlDataWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer the interaction to the agent
     * Transfer the interaction to an agent.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/TransferData} transferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.transferAgentWithHttpInfo = function(mediatype, id, transferData) {
      var postBody = transferData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling transferAgent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transferAgent");
      }

      // verify the required parameter 'transferData' is set
      if (transferData === undefined || transferData === null) {
        throw new Error("Missing the required parameter 'transferData' when calling transferAgent");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/transfer-agent', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Transfer the interaction to the agent
     * Transfer the interaction to an agent.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/TransferData} transferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.transferAgent = function(mediatype, id, transferData) {
      return this.transferAgentWithHttpInfo(mediatype, id, transferData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user data to the interaction
     * Update the interaction userdata with the provided key/value pairs.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/UserData} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.updateMediaUserDataWithHttpInfo = function(mediatype, id, userData) {
      var postBody = userData;

      // verify the required parameter 'mediatype' is set
      if (mediatype === undefined || mediatype === null) {
        throw new Error("Missing the required parameter 'mediatype' when calling updateMediaUserData");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMediaUserData");
      }

      // verify the required parameter 'userData' is set
      if (userData === undefined || userData === null) {
        throw new Error("Missing the required parameter 'userData' when calling updateMediaUserData");
      }


      var pathParams = {
        'mediatype': mediatype,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/media/{mediatype}/interactions/{id}/update-user-data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update user data to the interaction
     * Update the interaction userdata with the provided key/value pairs.
     * @param {String} mediatype media-type of interaction
     * @param {String} id id of the interaction
     * @param {module:model/UserData} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.updateMediaUserData = function(mediatype, id, userData) {
      return this.updateMediaUserDataWithHttpInfo(mediatype, id, userData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
