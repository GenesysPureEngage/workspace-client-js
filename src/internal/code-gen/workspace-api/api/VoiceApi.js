/**
 * Workspace API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AlternateData', 'model/AnswerData', 'model/ApiErrorResponse', 'model/ApiSuccessResponse', 'model/ClearData', 'model/CompleteConferenceData', 'model/CompleteTransferData', 'model/DeleteFromConferenceData', 'model/ForwardData', 'model/HoldData', 'model/InitiateConferenceData', 'model/InitiateTransferData', 'model/InlineResponse200', 'model/KeyData', 'model/MakeCallData', 'model/MergeData', 'model/MonitoringScopeData', 'model/NotReadyData', 'model/ReadyData', 'model/ReconnectData', 'model/RedirectData', 'model/ReleaseData', 'model/RetrieveData', 'model/SendDTMFData', 'model/SendUserEventData', 'model/SingleStepConferenceData', 'model/SingleStepTransferData', 'model/StartMonitoringData', 'model/StopMonitoringData', 'model/UserData', 'model/UserData1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AlternateData'), require('../model/AnswerData'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/ClearData'), require('../model/CompleteConferenceData'), require('../model/CompleteTransferData'), require('../model/DeleteFromConferenceData'), require('../model/ForwardData'), require('../model/HoldData'), require('../model/InitiateConferenceData'), require('../model/InitiateTransferData'), require('../model/InlineResponse200'), require('../model/KeyData'), require('../model/MakeCallData'), require('../model/MergeData'), require('../model/MonitoringScopeData'), require('../model/NotReadyData'), require('../model/ReadyData'), require('../model/ReconnectData'), require('../model/RedirectData'), require('../model/ReleaseData'), require('../model/RetrieveData'), require('../model/SendDTMFData'), require('../model/SendUserEventData'), require('../model/SingleStepConferenceData'), require('../model/SingleStepTransferData'), require('../model/StartMonitoringData'), require('../model/StopMonitoringData'), require('../model/UserData'), require('../model/UserData1'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.VoiceApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.AlternateData, root.WorkspaceApi.AnswerData, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.ClearData, root.WorkspaceApi.CompleteConferenceData, root.WorkspaceApi.CompleteTransferData, root.WorkspaceApi.DeleteFromConferenceData, root.WorkspaceApi.ForwardData, root.WorkspaceApi.HoldData, root.WorkspaceApi.InitiateConferenceData, root.WorkspaceApi.InitiateTransferData, root.WorkspaceApi.InlineResponse200, root.WorkspaceApi.KeyData, root.WorkspaceApi.MakeCallData, root.WorkspaceApi.MergeData, root.WorkspaceApi.MonitoringScopeData, root.WorkspaceApi.NotReadyData, root.WorkspaceApi.ReadyData, root.WorkspaceApi.ReconnectData, root.WorkspaceApi.RedirectData, root.WorkspaceApi.ReleaseData, root.WorkspaceApi.RetrieveData, root.WorkspaceApi.SendDTMFData, root.WorkspaceApi.SendUserEventData, root.WorkspaceApi.SingleStepConferenceData, root.WorkspaceApi.SingleStepTransferData, root.WorkspaceApi.StartMonitoringData, root.WorkspaceApi.StopMonitoringData, root.WorkspaceApi.UserData, root.WorkspaceApi.UserData1);
  }
}(this, function(ApiClient, AlternateData, AnswerData, ApiErrorResponse, ApiSuccessResponse, ClearData, CompleteConferenceData, CompleteTransferData, DeleteFromConferenceData, ForwardData, HoldData, InitiateConferenceData, InitiateTransferData, InlineResponse200, KeyData, MakeCallData, MergeData, MonitoringScopeData, NotReadyData, ReadyData, ReconnectData, RedirectData, ReleaseData, RetrieveData, SendDTMFData, SendUserEventData, SingleStepConferenceData, SingleStepTransferData, StartMonitoringData, StopMonitoringData, UserData, UserData1) {
  'use strict';

  /**
   * Voice service.
   * @module api/VoiceApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VoiceApi. 
   * @alias module:api/VoiceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Alternate between calls
     * Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
     * @param {String} id id of the active call that should be placed on hold
     * @param {module:model/AlternateData} alternateData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.alternateWithHttpInfo = function(id, alternateData) {
      var postBody = alternateData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling alternate");
      }

      // verify the required parameter 'alternateData' is set
      if (alternateData === undefined || alternateData === null) {
        throw new Error("Missing the required parameter 'alternateData' when calling alternate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/alternate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Alternate between calls
     * Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
     * @param {String} id id of the active call that should be placed on hold
     * @param {module:model/AlternateData} alternateData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.alternate = function(id, alternateData) {
      return this.alternateWithHttpInfo(id, alternateData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Answer a call
     * Answer the call specified in the id path parameter
     * @param {String} id id of the call to answer
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerData} opts.answerData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.answerWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['answerData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling answer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/answer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Answer a call
     * Answer the call specified in the id path parameter
     * @param {String} id id of the call to answer
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerData} opts.answerData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.answer = function(id, opts) {
      return this.answerWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Attach user data to a call
     * Attach the provided key/value pairs to the call.
     * @param {String} id id of the call
     * @param {module:model/UserData} userData An array of key/value pairs to attach.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.attachUserDataWithHttpInfo = function(id, userData) {
      var postBody = userData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachUserData");
      }

      // verify the required parameter 'userData' is set
      if (userData === undefined || userData === null) {
        throw new Error("Missing the required parameter 'userData' when calling attachUserData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/attach-user-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Attach user data to a call
     * Attach the provided key/value pairs to the call.
     * @param {String} id id of the call
     * @param {module:model/UserData} userData An array of key/value pairs to attach.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.attachUserData = function(id, userData) {
      return this.attachUserDataWithHttpInfo(id, userData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel call forwardarding
     * Cancel call forwardarding
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.cancelForwardWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/cancel-forward', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel call forwardarding
     * Cancel call forwardarding
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.cancelForward = function() {
      return this.cancelForwardWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear all the parties in the call.
     * Deletes all parties from the specified call and releases it.
     * @param {String} id id of the call to be cleared
     * @param {module:model/ClearData} clearData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.clearWithHttpInfo = function(id, clearData) {
      var postBody = clearData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clear");
      }

      // verify the required parameter 'clearData' is set
      if (clearData === undefined || clearData === null) {
        throw new Error("Missing the required parameter 'clearData' when calling clear");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Clear all the parties in the call.
     * Deletes all parties from the specified call and releases it.
     * @param {String} id id of the call to be cleared
     * @param {module:model/ClearData} clearData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.clear = function(id, clearData) {
      return this.clearWithHttpInfo(id, clearData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Complete a call
     * Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
     * @param {String} id id of the call
     * @param {module:model/UserData1} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.completeCallWithHttpInfo = function(id, userData) {
      var postBody = userData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeCall");
      }

      // verify the required parameter 'userData' is set
      if (userData === undefined || userData === null) {
        throw new Error("Missing the required parameter 'userData' when calling completeCall");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Complete a call
     * Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
     * @param {String} id id of the call
     * @param {module:model/UserData1} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.completeCall = function(id, userData) {
      return this.completeCallWithHttpInfo(id, userData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Complete a conference
     * Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
     * @param {String} id Id of the active call
     * @param {module:model/CompleteConferenceData} completeConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.completeConferenceWithHttpInfo = function(id, completeConferenceData) {
      var postBody = completeConferenceData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeConference");
      }

      // verify the required parameter 'completeConferenceData' is set
      if (completeConferenceData === undefined || completeConferenceData === null) {
        throw new Error("Missing the required parameter 'completeConferenceData' when calling completeConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/complete-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Complete a conference
     * Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
     * @param {String} id Id of the active call
     * @param {module:model/CompleteConferenceData} completeConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.completeConference = function(id, completeConferenceData) {
      return this.completeConferenceWithHttpInfo(id, completeConferenceData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Complete a transfer
     * Completes a previously initiated two-step transfer.
     * @param {String} id Id of the active call
     * @param {module:model/CompleteTransferData} completeTransferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.completeTransferWithHttpInfo = function(id, completeTransferData) {
      var postBody = completeTransferData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeTransfer");
      }

      // verify the required parameter 'completeTransferData' is set
      if (completeTransferData === undefined || completeTransferData === null) {
        throw new Error("Missing the required parameter 'completeTransferData' when calling completeTransfer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/complete-transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Complete a transfer
     * Completes a previously initiated two-step transfer.
     * @param {String} id Id of the active call
     * @param {module:model/CompleteTransferData} completeTransferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.completeTransfer = function(id, completeTransferData) {
      return this.completeTransferWithHttpInfo(id, completeTransferData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a party from a conference call
     * Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
     * @param {String} id The id of the conference call
     * @param {module:model/DeleteFromConferenceData} deleteFromConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.deleteFromConferenceWithHttpInfo = function(id, deleteFromConferenceData) {
      var postBody = deleteFromConferenceData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFromConference");
      }

      // verify the required parameter 'deleteFromConferenceData' is set
      if (deleteFromConferenceData === undefined || deleteFromConferenceData === null) {
        throw new Error("Missing the required parameter 'deleteFromConferenceData' when calling deleteFromConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/delete-from-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a party from a conference call
     * Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
     * @param {String} id The id of the conference call
     * @param {module:model/DeleteFromConferenceData} deleteFromConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.deleteFromConference = function(id, deleteFromConferenceData) {
      return this.deleteFromConferenceWithHttpInfo(id, deleteFromConferenceData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove key/value pair from user data
     * Deletes the specified key from the call data.
     * @param {String} id id of the call
     * @param {module:model/KeyData} keyData The key of the key/value pairs to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.deleteUserDataPairWithHttpInfo = function(id, keyData) {
      var postBody = keyData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserDataPair");
      }

      // verify the required parameter 'keyData' is set
      if (keyData === undefined || keyData === null) {
        throw new Error("Missing the required parameter 'keyData' when calling deleteUserDataPair");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/delete-user-data-pair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove key/value pair from user data
     * Deletes the specified key from the call data.
     * @param {String} id id of the call
     * @param {module:model/KeyData} keyData The key of the key/value pairs to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.deleteUserDataPair = function(id, keyData) {
      return this.deleteUserDataPairWithHttpInfo(id, keyData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fordward calls
     * Turn on call forwarding to the specified destination. 
     * @param {module:model/ForwardData} forwardData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.forwardWithHttpInfo = function(forwardData) {
      var postBody = forwardData;

      // verify the required parameter 'forwardData' is set
      if (forwardData === undefined || forwardData === null) {
        throw new Error("Missing the required parameter 'forwardData' when calling forward");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/set-forward', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fordward calls
     * Turn on call forwarding to the specified destination. 
     * @param {module:model/ForwardData} forwardData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.forward = function(forwardData) {
      return this.forwardWithHttpInfo(forwardData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all the calls
     * Returns an array containing any active calls for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.getCallsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/voice/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all the calls
     * Returns an array containing any active calls for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.getCalls = function() {
      return this.getCallsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Place a call on hold
     * Place the call specified by the id path parameter on hold.
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:model/HoldData} opts.holdData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.holdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['holdData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling hold");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/hold', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Place a call on hold
     * Place the call specified by the id path parameter on hold.
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:model/HoldData} opts.holdData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.hold = function(id, opts) {
      return this.holdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiate a conference
     * Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
     * @param {String} id id of the call to initiate the conference from. This call will be placed on hold.
     * @param {module:model/InitiateConferenceData} initiateConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.initiateConferenceWithHttpInfo = function(id, initiateConferenceData) {
      var postBody = initiateConferenceData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling initiateConference");
      }

      // verify the required parameter 'initiateConferenceData' is set
      if (initiateConferenceData === undefined || initiateConferenceData === null) {
        throw new Error("Missing the required parameter 'initiateConferenceData' when calling initiateConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/initiate-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Initiate a conference
     * Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
     * @param {String} id id of the call to initiate the conference from. This call will be placed on hold.
     * @param {module:model/InitiateConferenceData} initiateConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.initiateConference = function(id, initiateConferenceData) {
      return this.initiateConferenceWithHttpInfo(id, initiateConferenceData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiate a transfer
     * Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
     * @param {String} id Connection identifier of the call that is requested to be placed on hold.
     * @param {module:model/InitiateTransferData} initiateTransferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.initiateTransferWithHttpInfo = function(id, initiateTransferData) {
      var postBody = initiateTransferData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling initiateTransfer");
      }

      // verify the required parameter 'initiateTransferData' is set
      if (initiateTransferData === undefined || initiateTransferData === null) {
        throw new Error("Missing the required parameter 'initiateTransferData' when calling initiateTransfer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/initiate-transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Initiate a transfer
     * Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
     * @param {String} id Connection identifier of the call that is requested to be placed on hold.
     * @param {module:model/InitiateTransferData} initiateTransferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.initiateTransfer = function(id, initiateTransferData) {
      return this.initiateTransferWithHttpInfo(id, initiateTransferData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Login the media voice
     * Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.loginVoiceWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Login the media voice
     * Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.loginVoice = function() {
      return this.loginVoiceWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Logout the media voice
     * Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.logoutVoiceWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Logout the media voice
     * Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.logoutVoice = function() {
      return this.logoutVoiceWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make a new call to the specified destination
     * Make a new call to the specified destination
     * @param {module:model/MakeCallData} makeCallData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.makeCallWithHttpInfo = function(makeCallData) {
      var postBody = makeCallData;

      // verify the required parameter 'makeCallData' is set
      if (makeCallData === undefined || makeCallData === null) {
        throw new Error("Missing the required parameter 'makeCallData' when calling makeCall");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/make-call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Make a new call to the specified destination
     * Make a new call to the specified destination
     * @param {module:model/MakeCallData} makeCallData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.makeCall = function(makeCallData) {
      return this.makeCallWithHttpInfo(makeCallData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Merge two calls
     * Merge two calls 
     * @param {String} id Connection identifier of the first call to be merged
     * @param {module:model/MergeData} mergeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.mergeWithHttpInfo = function(id, mergeData) {
      var postBody = mergeData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling merge");
      }

      // verify the required parameter 'mergeData' is set
      if (mergeData === undefined || mergeData === null) {
        throw new Error("Missing the required parameter 'mergeData' when calling merge");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Merge two calls
     * Merge two calls 
     * @param {String} id Connection identifier of the first call to be merged
     * @param {module:model/MergeData} mergeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.merge = function(id, mergeData) {
      return this.mergeWithHttpInfo(id, mergeData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pauses call recording.
     * Pauses call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.pauseRecordingWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pauseRecording");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/pause-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Pauses call recording.
     * Pauses call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.pauseRecording = function(id) {
      return this.pauseRecordingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reconnect a call
     * Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step. 
     * @param {String} id The id of the active call
     * @param {module:model/ReconnectData} reconnectData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.reconnectWithHttpInfo = function(id, reconnectData) {
      var postBody = reconnectData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reconnect");
      }

      // verify the required parameter 'reconnectData' is set
      if (reconnectData === undefined || reconnectData === null) {
        throw new Error("Missing the required parameter 'reconnectData' when calling reconnect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/reconnect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reconnect a call
     * Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step. 
     * @param {String} id The id of the active call
     * @param {module:model/ReconnectData} reconnectData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.reconnect = function(id, reconnectData) {
      return this.reconnectWithHttpInfo(id, reconnectData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Redirect the call.
     * Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
     * @param {String} id Connection ID of the current call handled by the DN.
     * @param {module:model/RedirectData} redirectData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.redirectWithHttpInfo = function(id, redirectData) {
      var postBody = redirectData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling redirect");
      }

      // verify the required parameter 'redirectData' is set
      if (redirectData === undefined || redirectData === null) {
        throw new Error("Missing the required parameter 'redirectData' when calling redirect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/redirect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Redirect the call.
     * Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
     * @param {String} id Connection ID of the current call handled by the DN.
     * @param {module:model/RedirectData} redirectData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.redirect = function(id, redirectData) {
      return this.redirectWithHttpInfo(id, redirectData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Release a call
     * Release the call specified by the id path parameter.
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleaseData} opts.releaseData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.releaseWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['releaseData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling release");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Release a call
     * Release the call specified by the id path parameter.
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleaseData} opts.releaseData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.release = function(id, opts) {
      return this.releaseWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resumes call recording.
     * Resumes call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.resumeRecordingWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resumeRecording");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/resume-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Resumes call recording.
     * Resumes call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.resumeRecording = function(id) {
      return this.resumeRecordingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a held call
     * Retrieve the held call specified by the id path parameter.
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:model/RetrieveData} opts.retrieveData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.retrieveWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['retrieveData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieve");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a held call
     * Retrieve the held call specified by the id path parameter.
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:model/RetrieveData} opts.retrieveData Request parameters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.retrieve = function(id, opts) {
      return this.retrieveWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send digits as DTMF.
     * Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
     * @param {String} id Id of the cal
     * @param {module:model/SendDTMFData} sendDTMFData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.sendDTMFWithHttpInfo = function(id, sendDTMFData) {
      var postBody = sendDTMFData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendDTMF");
      }

      // verify the required parameter 'sendDTMFData' is set
      if (sendDTMFData === undefined || sendDTMFData === null) {
        throw new Error("Missing the required parameter 'sendDTMFData' when calling sendDTMF");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/send-dtmf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send digits as DTMF.
     * Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
     * @param {String} id Id of the cal
     * @param {module:model/SendDTMFData} sendDTMFData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.sendDTMF = function(id, sendDTMFData) {
      return this.sendDTMFWithHttpInfo(id, sendDTMFData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a userEvent event to TServer with provided attached data.
     * Send a userEvent event to TServer with provided attached data.
     * @param {module:model/SendUserEventData} userEventData Data defining the user event to be distributed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.sendUserEventWithHttpInfo = function(userEventData) {
      var postBody = userEventData;

      // verify the required parameter 'userEventData' is set
      if (userEventData === undefined || userEventData === null) {
        throw new Error("Missing the required parameter 'userEventData' when calling sendUserEvent");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/send-user-event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a userEvent event to TServer with provided attached data.
     * Send a userEvent event to TServer with provided attached data.
     * @param {module:model/SendUserEventData} userEventData Data defining the user event to be distributed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.sendUserEvent = function(userEventData) {
      return this.sendUserEventWithHttpInfo(userEventData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change to the not ready state for voice
     * Change to the not ready state for voice
     * @param {Object} opts Optional parameters
     * @param {module:model/NotReadyData} opts.notReadyData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.setAgentStateNotReadyWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['notReadyData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/not-ready', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change to the not ready state for voice
     * Change to the not ready state for voice
     * @param {Object} opts Optional parameters
     * @param {module:model/NotReadyData} opts.notReadyData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.setAgentStateNotReady = function(opts) {
      return this.setAgentStateNotReadyWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change to the ready state for voice
     * Change to the ready state for voice
     * @param {Object} opts Optional parameters
     * @param {module:model/ReadyData} opts.readyData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.setAgentStateReadyWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['readyData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/ready', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change to the ready state for voice
     * Change to the ready state for voice
     * @param {Object} opts Optional parameters
     * @param {module:model/ReadyData} opts.readyData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.setAgentStateReady = function(opts) {
      return this.setAgentStateReadyWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Turn off do not disturb for voice
     * Turn off do not disturb for voice
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.setDNDOffWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/dnd-off', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Turn off do not disturb for voice
     * Turn off do not disturb for voice
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.setDNDOff = function() {
      return this.setDNDOffWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Turn on do not disturb for voice
     * Turn on do not disturb for voice
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.setDNDOnWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/dnd-on', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Turn on do not disturb for voice
     * Turn on do not disturb for voice
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.setDNDOn = function() {
      return this.setDNDOnWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a conference in a single step
     * Performs a single-step conference, adding the specified participant to the call.
     * @param {String} id Connection identifier of the call that is requested to be conferenced.
     * @param {module:model/SingleStepConferenceData} singleStepConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.singleStepConferenceWithHttpInfo = function(id, singleStepConferenceData) {
      var postBody = singleStepConferenceData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling singleStepConference");
      }

      // verify the required parameter 'singleStepConferenceData' is set
      if (singleStepConferenceData === undefined || singleStepConferenceData === null) {
        throw new Error("Missing the required parameter 'singleStepConferenceData' when calling singleStepConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/single-step-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a conference in a single step
     * Performs a single-step conference, adding the specified participant to the call.
     * @param {String} id Connection identifier of the call that is requested to be conferenced.
     * @param {module:model/SingleStepConferenceData} singleStepConferenceData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.singleStepConference = function(id, singleStepConferenceData) {
      return this.singleStepConferenceWithHttpInfo(id, singleStepConferenceData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer a call in a single step
     * Performs a single-step transfer to the specified destination.
     * @param {String} id The id of the call to be transferred.
     * @param {module:model/SingleStepTransferData} singleStepTransferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.singleStepTransferWithHttpInfo = function(id, singleStepTransferData) {
      var postBody = singleStepTransferData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling singleStepTransfer");
      }

      // verify the required parameter 'singleStepTransferData' is set
      if (singleStepTransferData === undefined || singleStepTransferData === null) {
        throw new Error("Missing the required parameter 'singleStepTransferData' when calling singleStepTransfer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/single-step-transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Transfer a call in a single step
     * Performs a single-step transfer to the specified destination.
     * @param {String} id The id of the call to be transferred.
     * @param {module:model/SingleStepTransferData} singleStepTransferData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.singleStepTransfer = function(id, singleStepTransferData) {
      return this.singleStepTransferWithHttpInfo(id, singleStepTransferData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start the monitoring of an agent.
     * Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Monitor/Coach), monitoringNextCallType (NextCall/AllCalls), monitoringScope (Agent/Call)).
     * @param {module:model/StartMonitoringData} startMonitoringData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.startMonitoringWithHttpInfo = function(startMonitoringData) {
      var postBody = startMonitoringData;

      // verify the required parameter 'startMonitoringData' is set
      if (startMonitoringData === undefined || startMonitoringData === null) {
        throw new Error("Missing the required parameter 'startMonitoringData' when calling startMonitoring");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/start-monitoring', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Start the monitoring of an agent.
     * Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Monitor/Coach), monitoringNextCallType (NextCall/AllCalls), monitoringScope (Agent/Call)).
     * @param {module:model/StartMonitoringData} startMonitoringData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.startMonitoring = function(startMonitoringData) {
      return this.startMonitoringWithHttpInfo(startMonitoringData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Starts call recording.
     * Starts call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.startRecordingWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startRecording");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/start-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Starts call recording.
     * Starts call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.startRecording = function(id) {
      return this.startRecordingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop the monitoring of an agent.
     * Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
     * @param {module:model/StopMonitoringData} stopMonitoringData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.stopMonitoringWithHttpInfo = function(stopMonitoringData) {
      var postBody = stopMonitoringData;

      // verify the required parameter 'stopMonitoringData' is set
      if (stopMonitoringData === undefined || stopMonitoringData === null) {
        throw new Error("Missing the required parameter 'stopMonitoringData' when calling stopMonitoring");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/stop-monitoring', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Stop the monitoring of an agent.
     * Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
     * @param {module:model/StopMonitoringData} stopMonitoringData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.stopMonitoring = function(stopMonitoringData) {
      return this.stopMonitoringWithHttpInfo(stopMonitoringData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stops call recording.
     * Stops call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.stopRecordingWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopRecording");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/stop-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Stops call recording.
     * Stops call recording.
     * @param {String} id id of the call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.stopRecording = function(id) {
      return this.stopRecordingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Switch to barge in monitoring mode.
     * Switch the currently monitored voice interaction to barge in mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.switchToBargeInWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['monitoringScopeData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchToBargeIn");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/switch-to-barge-in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Switch to barge in monitoring mode.
     * Switch the currently monitored voice interaction to barge in mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.switchToBargeIn = function(id, opts) {
      return this.switchToBargeInWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Switch to coaching monitoring mode.
     * Switch the currently monitored voice interaction to coaching mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.switchToCoachingWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['monitoringScopeData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchToCoaching");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/switch-to-coaching', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Switch to coaching monitoring mode.
     * Switch the currently monitored voice interaction to coaching mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.switchToCoaching = function(id, opts) {
      return this.switchToCoachingWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Switch to listen in monitoring mode.
     * Switch the currently monitored voice interaction to listen in mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.switchToListenInWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['monitoringScopeData'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchToListenIn");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/switch-to-listen-in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Switch to listen in monitoring mode.
     * Switch the currently monitored voice interaction to listen in mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.switchToListenIn = function(id, opts) {
      return this.switchToListenInWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user data to a call
     * Update the call userdata with the provided key/value pairs.
     * @param {String} id id of the call
     * @param {module:model/UserData} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiSuccessResponse} and HTTP response
     */
    this.updateUserDataWithHttpInfo = function(id, userData) {
      var postBody = userData;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserData");
      }

      // verify the required parameter 'userData' is set
      if (userData === undefined || userData === null) {
        throw new Error("Missing the required parameter 'userData' when calling updateUserData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/update-user-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update user data to a call
     * Update the call userdata with the provided key/value pairs.
     * @param {String} id id of the call
     * @param {module:model/UserData} userData An array of key/value pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiSuccessResponse}
     */
    this.updateUserData = function(id, userData) {
      return this.updateUserDataWithHttpInfo(id, userData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
