/**
 * Workspace API
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.NotificationsApi = factory(root.WorkspaceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Notifications service.
   * @module api/NotificationsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new NotificationsApi. 
   * @alias module:api/NotificationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Enables subscription to CometD notification API
     * Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.notificationsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enables subscription to CometD notification API
     * Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.notifications = function() {
      return this.notificationsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.notificationsConnectWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications/connect', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.notificationsConnect = function() {
      return this.notificationsConnectWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close CometD notification subscriptions
     * Close CometD notification subscriptions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.notificationsDisconnectWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications/disconnect', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close CometD notification subscriptions
     * Close CometD notification subscriptions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.notificationsDisconnect = function() {
      return this.notificationsDisconnectWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.notificationsHandshakeWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications/handshake', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.notificationsHandshake = function() {
      return this.notificationsHandshakeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Subscribes CometD channel notification
     * Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.notificationsSubscribeWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications/subscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Subscribes CometD channel notification
     * Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.notificationsSubscribe = function() {
      return this.notificationsSubscribeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unsubscribes CometD channel notification
     * Unsubscribes CometD channel notification
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.notificationsUnsubscribeWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications/unsubscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unsubscribes CometD channel notification
     * Unsubscribes CometD channel notification
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.notificationsUnsubscribe = function() {
      return this.notificationsUnsubscribeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enables subscription to SocketIO notifications
     * Enables subscription to SocketIO notifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.socketioWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socket.io', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enables subscription to SocketIO notifications
     * Enables subscription to SocketIO notifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.socketio = function() {
      return this.socketioWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
