/**
 * Workspace API
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.73.3626
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.Field = factory(root.WorkspaceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Field model module.
   * @module model/Field
   * @version 9.0.000.73.3626
   */

  /**
   * Constructs a new <code>Field</code>.
   * @alias module:model/Field
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Field} obj Optional instance to populate.
   * @return {module:model/Field} The populated <code>Field</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('sendAttribute')) {
        obj['sendAttribute'] = ApiClient.convertToType(data['sendAttribute'], 'String');
      }
      if (data.hasOwnProperty('isCustomField')) {
        obj['isCustomField'] = ApiClient.convertToType(data['isCustomField'], 'Boolean');
      }
      if (data.hasOwnProperty('isNullable')) {
        obj['isNullable'] = ApiClient.convertToType(data['isNullable'], 'Boolean');
      }
      if (data.hasOwnProperty('length')) {
        obj['length'] = ApiClient.convertToType(data['length'], 'Number');
      }
    }
    return obj;
  }

  /**
   * name of field
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * type of field
   * @member {module:model/Field.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * name of the key
   * @member {String} sendAttribute
   */
  exports.prototype['sendAttribute'] = undefined;
  /**
   * @member {Boolean} isCustomField
   */
  exports.prototype['isCustomField'] = undefined;
  /**
   * @member {Boolean} isNullable
   */
  exports.prototype['isNullable'] = undefined;
  /**
   * @member {Number} length
   */
  exports.prototype['length'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "no-type"
     * @const
     */
    "no-type": "no-type",
    /**
     * value: "int"
     * @const
     */
    "int": "int",
    /**
     * value: "float"
     * @const
     */
    "float": "float",
    /**
     * value: "char"
     * @const
     */
    "char": "char",
    /**
     * value: "var-char"
     * @const
     */
    "var-char": "var-char",
    /**
     * value: "date-time"
     * @const
     */
    "date-time": "date-time"  };


  return exports;
}));


