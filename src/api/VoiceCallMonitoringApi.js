/**
 * Workspace API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/ApiSuccessResponse', 'model/MonitoringScopeData', 'model/StartMonitoringData', 'model/StopMonitoringData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/MonitoringScopeData'), require('../model/StartMonitoringData'), require('../model/StopMonitoringData'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.VoiceCallMonitoringApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.MonitoringScopeData, root.WorkspaceApi.StartMonitoringData, root.WorkspaceApi.StopMonitoringData);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse, MonitoringScopeData, StartMonitoringData, StopMonitoringData) {
  'use strict';

  /**
   * VoiceCallMonitoring service.
   * @module api/VoiceCallMonitoringApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VoiceCallMonitoringApi. 
   * @alias module:api/VoiceCallMonitoringApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the startMonitoring operation.
     * @callback module:api/VoiceCallMonitoringApi~startMonitoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the monitoring of an agent.
     * Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
     * @param {module:model/StartMonitoringData} startMonitoringData 
     * @param {module:api/VoiceCallMonitoringApi~startMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.startMonitoring = function(startMonitoringData, callback) {
      var postBody = startMonitoringData;

      // verify the required parameter 'startMonitoringData' is set
      if (startMonitoringData == undefined || startMonitoringData == null) {
        throw new Error("Missing the required parameter 'startMonitoringData' when calling startMonitoring");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/start-monitoring', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopMonitoring operation.
     * @callback module:api/VoiceCallMonitoringApi~stopMonitoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop the monitoring of an agent.
     * Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
     * @param {module:model/StopMonitoringData} stopMonitoringData 
     * @param {module:api/VoiceCallMonitoringApi~stopMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.stopMonitoring = function(stopMonitoringData, callback) {
      var postBody = stopMonitoringData;

      // verify the required parameter 'stopMonitoringData' is set
      if (stopMonitoringData == undefined || stopMonitoringData == null) {
        throw new Error("Missing the required parameter 'stopMonitoringData' when calling stopMonitoring");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/stop-monitoring', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchToBargeIn operation.
     * @callback module:api/VoiceCallMonitoringApi~switchToBargeInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Switch to barge in monitoring mode.
     * Switch the currently monitored voice interaction to barge in mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @param {module:api/VoiceCallMonitoringApi~switchToBargeInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.switchToBargeIn = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['monitoringScopeData'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling switchToBargeIn");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/switch-to-barge-in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchToCoaching operation.
     * @callback module:api/VoiceCallMonitoringApi~switchToCoachingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Switch to coaching monitoring mode.
     * Switch the currently monitored voice interaction to coaching mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @param {module:api/VoiceCallMonitoringApi~switchToCoachingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.switchToCoaching = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['monitoringScopeData'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling switchToCoaching");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/switch-to-coaching', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchToListenIn operation.
     * @callback module:api/VoiceCallMonitoringApi~switchToListenInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Switch to listen in monitoring mode.
     * Switch the currently monitored voice interaction to listen in mode
     * @param {String} id Connection identifier of the call in question.
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitoringScopeData} opts.monitoringScopeData 
     * @param {module:api/VoiceCallMonitoringApi~switchToListenInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.switchToListenIn = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['monitoringScopeData'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling switchToListenIn");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/switch-to-listen-in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
