/**
 * Workspace API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AgentHistoryData', 'model/ApiErrorResponse', 'model/ApiSuccessResponse', 'model/AssignInteractionToContactData', 'model/CallCompletedData', 'model/CallNoteData', 'model/ConfigResponse', 'model/ContactDetailsData', 'model/ContactHistoryData', 'model/DeleteContactData', 'model/GetContactsData', 'model/IdentifyContactData', 'model/InteractionContentData', 'model/LuceneSearchData', 'model/LuceneSearchInteractionData', 'model/PhoneCallData', 'model/UpdateContactData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AgentHistoryData'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/AssignInteractionToContactData'), require('../model/CallCompletedData'), require('../model/CallNoteData'), require('../model/ConfigResponse'), require('../model/ContactDetailsData'), require('../model/ContactHistoryData'), require('../model/DeleteContactData'), require('../model/GetContactsData'), require('../model/IdentifyContactData'), require('../model/InteractionContentData'), require('../model/LuceneSearchData'), require('../model/LuceneSearchInteractionData'), require('../model/PhoneCallData'), require('../model/UpdateContactData'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.UcsApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.AgentHistoryData, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.AssignInteractionToContactData, root.WorkspaceApi.CallCompletedData, root.WorkspaceApi.CallNoteData, root.WorkspaceApi.ConfigResponse, root.WorkspaceApi.ContactDetailsData, root.WorkspaceApi.ContactHistoryData, root.WorkspaceApi.DeleteContactData, root.WorkspaceApi.GetContactsData, root.WorkspaceApi.IdentifyContactData, root.WorkspaceApi.InteractionContentData, root.WorkspaceApi.LuceneSearchData, root.WorkspaceApi.LuceneSearchInteractionData, root.WorkspaceApi.PhoneCallData, root.WorkspaceApi.UpdateContactData);
  }
}(this, function(ApiClient, AgentHistoryData, ApiErrorResponse, ApiSuccessResponse, AssignInteractionToContactData, CallCompletedData, CallNoteData, ConfigResponse, ContactDetailsData, ContactHistoryData, DeleteContactData, GetContactsData, IdentifyContactData, InteractionContentData, LuceneSearchData, LuceneSearchInteractionData, PhoneCallData, UpdateContactData) {
  'use strict';

  /**
   * Ucs service.
   * @module api/UcsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UcsApi. 
   * @alias module:api/UcsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignInteractionToContact operation.
     * @callback module:api/UcsApi~assignInteractionToContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign the interaction to a contact
     * @param {module:model/AssignInteractionToContactData} assignInteractionToContactData 
     * @param {module:api/UcsApi~assignInteractionToContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.assignInteractionToContact = function(assignInteractionToContactData, callback) {
      var postBody = assignInteractionToContactData;

      // verify the required parameter 'assignInteractionToContactData' is set
      if (assignInteractionToContactData == undefined || assignInteractionToContactData == null) {
        throw new Error("Missing the required parameter 'assignInteractionToContactData' when calling assignInteractionToContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/assign-interaction-to-contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContact operation.
     * @callback module:api/UcsApi~createContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new contact
     * @param {module:api/UcsApi~createContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.createContact = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/create-contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContact operation.
     * @callback module:api/UcsApi~deleteContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing contact
     * @param {module:model/DeleteContactData} deleteContactData 
     * @param {module:api/UcsApi~deleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.deleteContact = function(deleteContactData, callback) {
      var postBody = deleteContactData;

      // verify the required parameter 'deleteContactData' is set
      if (deleteContactData == undefined || deleteContactData == null) {
        throw new Error("Missing the required parameter 'deleteContactData' when calling deleteContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/delete-contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findOrCreatePhoneCall operation.
     * @callback module:api/UcsApi~findOrCreatePhoneCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find or create phone call in UCS
     * @param {module:model/PhoneCallData} phoneCallData 
     * @param {module:api/UcsApi~findOrCreatePhoneCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.findOrCreatePhoneCall = function(phoneCallData, callback) {
      var postBody = phoneCallData;

      // verify the required parameter 'phoneCallData' is set
      if (phoneCallData == undefined || phoneCallData == null) {
        throw new Error("Missing the required parameter 'phoneCallData' when calling findOrCreatePhoneCall");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/find-or-create-phone-call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentHistory operation.
     * @callback module:api/UcsApi~getAgentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of interactions for the agent
     * @param {Object} opts Optional parameters
     * @param {module:model/AgentHistoryData} opts.agentHistoryData 
     * @param {module:api/UcsApi~getAgentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.getAgentHistory = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['agentHistoryData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/get-agent-history', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactDetails operation.
     * @callback module:api/UcsApi~getContactDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a contact
     * @param {module:model/ContactDetailsData} contactDetailsData 
     * @param {module:api/UcsApi~getContactDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.getContactDetails = function(contactDetailsData, callback) {
      var postBody = contactDetailsData;

      // verify the required parameter 'contactDetailsData' is set
      if (contactDetailsData == undefined || contactDetailsData == null) {
        throw new Error("Missing the required parameter 'contactDetailsData' when calling getContactDetails");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/get-contact-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactHistory operation.
     * @callback module:api/UcsApi~getContactHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of interactions for a contact
     * @param {module:model/ContactHistoryData} contactHistoryData 
     * @param {module:api/UcsApi~getContactHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.getContactHistory = function(contactHistoryData, callback) {
      var postBody = contactHistoryData;

      // verify the required parameter 'contactHistoryData' is set
      if (contactHistoryData == undefined || contactHistoryData == null) {
        throw new Error("Missing the required parameter 'contactHistoryData' when calling getContactHistory");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/get-contact-history', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts operation.
     * @callback module:api/UcsApi~getContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contacts based on search criteria.
     * @param {module:model/GetContactsData} getContactsData 
     * @param {module:api/UcsApi~getContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.getContacts = function(getContactsData, callback) {
      var postBody = getContactsData;

      // verify the required parameter 'getContactsData' is set
      if (getContactsData == undefined || getContactsData == null) {
        throw new Error("Missing the required parameter 'getContactsData' when calling getContacts");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/get-contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndexProperties operation.
     * @callback module:api/UcsApi~getIndexPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the lucene indexes for ucs
     * This request returns all the lucene indexes for contact 
     * @param {module:api/UcsApi~getIndexPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigResponse}
     */
    this.getIndexProperties = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfigResponse;

      return this.apiClient.callApi(
        '/ucs/get-index-properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInteractionContent operation.
     * @callback module:api/UcsApi~getInteractionContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of the interaction
     * @param {module:model/InteractionContentData} interactionContentData 
     * @param {module:api/UcsApi~getInteractionContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.getInteractionContent = function(interactionContentData, callback) {
      var postBody = interactionContentData;

      // verify the required parameter 'interactionContentData' is set
      if (interactionContentData == undefined || interactionContentData == null) {
        throw new Error("Missing the required parameter 'interactionContentData' when calling getInteractionContent");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/get-interaction-content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the identifyContact operation.
     * @callback module:api/UcsApi~identifyContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify the contact for the interaction
     * @param {module:model/IdentifyContactData} identifyContactData 
     * @param {module:api/UcsApi~identifyContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.identifyContact = function(identifyContactData, callback) {
      var postBody = identifyContactData;

      // verify the required parameter 'identifyContactData' is set
      if (identifyContactData == undefined || identifyContactData == null) {
        throw new Error("Missing the required parameter 'identifyContactData' when calling identifyContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/identify-contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the luceneSearch operation.
     * @callback module:api/UcsApi~luceneSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for contacts based on search query, using lucene search
     * @param {module:model/LuceneSearchData} luceneSearchData 
     * @param {module:api/UcsApi~luceneSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.luceneSearch = function(luceneSearchData, callback) {
      var postBody = luceneSearchData;

      // verify the required parameter 'luceneSearchData' is set
      if (luceneSearchData == undefined || luceneSearchData == null) {
        throw new Error("Missing the required parameter 'luceneSearchData' when calling luceneSearch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/lucene-search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the luceneSearchInteraction operation.
     * @callback module:api/UcsApi~luceneSearchInteractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for interactions based on search query, using lucene search
     * @param {module:model/LuceneSearchInteractionData} luceneSearchInteractionData 
     * @param {module:api/UcsApi~luceneSearchInteractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.luceneSearchInteraction = function(luceneSearchInteractionData, callback) {
      var postBody = luceneSearchInteractionData;

      // verify the required parameter 'luceneSearchInteractionData' is set
      if (luceneSearchInteractionData == undefined || luceneSearchInteractionData == null) {
        throw new Error("Missing the required parameter 'luceneSearchInteractionData' when calling luceneSearchInteraction");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/lucene-search-interaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCallCompleted operation.
     * @callback module:api/UcsApi~setCallCompletedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the call as being completed
     * @param {module:model/CallCompletedData} callCompletedData 
     * @param {module:api/UcsApi~setCallCompletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.setCallCompleted = function(callCompletedData, callback) {
      var postBody = callCompletedData;

      // verify the required parameter 'callCompletedData' is set
      if (callCompletedData == undefined || callCompletedData == null) {
        throw new Error("Missing the required parameter 'callCompletedData' when calling setCallCompleted");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/set-call-completed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCallNote operation.
     * @callback module:api/UcsApi~setCallNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the note for the call
     * @param {module:model/CallNoteData} callNoteData 
     * @param {module:api/UcsApi~setCallNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.setCallNote = function(callNoteData, callback) {
      var postBody = callNoteData;

      // verify the required parameter 'callNoteData' is set
      if (callNoteData == undefined || callNoteData == null) {
        throw new Error("Missing the required parameter 'callNoteData' when calling setCallNote");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/set-call-note', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/UcsApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update attributes of an existing contact
     * @param {module:model/UpdateContactData} updateContactData 
     * @param {module:api/UcsApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.updateContact = function(updateContactData, callback) {
      var postBody = updateContactData;

      // verify the required parameter 'updateContactData' is set
      if (updateContactData == undefined || updateContactData == null) {
        throw new Error("Missing the required parameter 'updateContactData' when calling updateContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/ucs/update-contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
