/**
 * Workspace API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/ApiSuccessResponse', 'model/CompleteConferenceData', 'model/CompleteTransferData', 'model/DeleteFromConferenceData', 'model/InitiateConferenceData', 'model/InitiateTransferData', 'model/SingleStepConferenceData', 'model/SingleStepTransferData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/CompleteConferenceData'), require('../model/CompleteTransferData'), require('../model/DeleteFromConferenceData'), require('../model/InitiateConferenceData'), require('../model/InitiateTransferData'), require('../model/SingleStepConferenceData'), require('../model/SingleStepTransferData'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.VoiceConferencesAndTransfersApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.CompleteConferenceData, root.WorkspaceApi.CompleteTransferData, root.WorkspaceApi.DeleteFromConferenceData, root.WorkspaceApi.InitiateConferenceData, root.WorkspaceApi.InitiateTransferData, root.WorkspaceApi.SingleStepConferenceData, root.WorkspaceApi.SingleStepTransferData);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse, CompleteConferenceData, CompleteTransferData, DeleteFromConferenceData, InitiateConferenceData, InitiateTransferData, SingleStepConferenceData, SingleStepTransferData) {
  'use strict';

  /**
   * VoiceConferencesAndTransfers service.
   * @module api/VoiceConferencesAndTransfersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VoiceConferencesAndTransfersApi. 
   * @alias module:api/VoiceConferencesAndTransfersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the completeConference operation.
     * @callback module:api/VoiceConferencesAndTransfersApi~completeConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a conference
     * @param {String} id Connection identifier of the consult call
     * @param {module:model/CompleteConferenceData} completeConferenceData 
     * @param {module:api/VoiceConferencesAndTransfersApi~completeConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.completeConference = function(id, completeConferenceData, callback) {
      var postBody = completeConferenceData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling completeConference");
      }

      // verify the required parameter 'completeConferenceData' is set
      if (completeConferenceData == undefined || completeConferenceData == null) {
        throw new Error("Missing the required parameter 'completeConferenceData' when calling completeConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/complete-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the completeTransfer operation.
     * @callback module:api/VoiceConferencesAndTransfersApi~completeTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a transfer
     * @param {String} id Connection identifier of the consult call
     * @param {module:model/CompleteTransferData} completeTransferData 
     * @param {module:api/VoiceConferencesAndTransfersApi~completeTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.completeTransfer = function(id, completeTransferData, callback) {
      var postBody = completeTransferData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling completeTransfer");
      }

      // verify the required parameter 'completeTransferData' is set
      if (completeTransferData == undefined || completeTransferData == null) {
        throw new Error("Missing the required parameter 'completeTransferData' when calling completeTransfer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/complete-transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFromConference operation.
     * @callback module:api/VoiceConferencesAndTransfersApi~deleteFromConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a conference
     * @param {String} id Connection identifier of the conference call from which the object is requested to be deleted.
     * @param {module:model/DeleteFromConferenceData} deleteFromConferenceData 
     * @param {module:api/VoiceConferencesAndTransfersApi~deleteFromConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.deleteFromConference = function(id, deleteFromConferenceData, callback) {
      var postBody = deleteFromConferenceData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFromConference");
      }

      // verify the required parameter 'deleteFromConferenceData' is set
      if (deleteFromConferenceData == undefined || deleteFromConferenceData == null) {
        throw new Error("Missing the required parameter 'deleteFromConferenceData' when calling deleteFromConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/delete-from-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateConference operation.
     * @callback module:api/VoiceConferencesAndTransfersApi~initiateConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a conference
     * @param {String} id Connection identifier of the call that is requested to be placed on hold.
     * @param {module:model/InitiateConferenceData} initiateConferenceData 
     * @param {module:api/VoiceConferencesAndTransfersApi~initiateConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.initiateConference = function(id, initiateConferenceData, callback) {
      var postBody = initiateConferenceData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling initiateConference");
      }

      // verify the required parameter 'initiateConferenceData' is set
      if (initiateConferenceData == undefined || initiateConferenceData == null) {
        throw new Error("Missing the required parameter 'initiateConferenceData' when calling initiateConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/initiate-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateTransfer operation.
     * @callback module:api/VoiceConferencesAndTransfersApi~initiateTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a transfer
     * @param {String} id Connection identifier of the call that is requested to be placed on hold.
     * @param {module:model/InitiateTransferData} initiateTransferData 
     * @param {module:api/VoiceConferencesAndTransfersApi~initiateTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.initiateTransfer = function(id, initiateTransferData, callback) {
      var postBody = initiateTransferData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling initiateTransfer");
      }

      // verify the required parameter 'initiateTransferData' is set
      if (initiateTransferData == undefined || initiateTransferData == null) {
        throw new Error("Missing the required parameter 'initiateTransferData' when calling initiateTransfer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/initiate-transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the singleStepConference operation.
     * @callback module:api/VoiceConferencesAndTransfersApi~singleStepConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a conference in a single step
     * Adds a new party to an existing call and creates a conference.
     * @param {String} id Connection identifier of the call that is requested to be conferenced.
     * @param {module:model/SingleStepConferenceData} singleStepConferenceData 
     * @param {module:api/VoiceConferencesAndTransfersApi~singleStepConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.singleStepConference = function(id, singleStepConferenceData, callback) {
      var postBody = singleStepConferenceData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling singleStepConference");
      }

      // verify the required parameter 'singleStepConferenceData' is set
      if (singleStepConferenceData == undefined || singleStepConferenceData == null) {
        throw new Error("Missing the required parameter 'singleStepConferenceData' when calling singleStepConference");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/single-step-conference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the singleStepTransfer operation.
     * @callback module:api/VoiceConferencesAndTransfersApi~singleStepTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer a call in a single step
     * Transfers the call from a specified directory number dn that is currently engaged in the call specified by the parameter conn_id to a destination DN that is specified by the parameter destination.
     * @param {String} id Connection identifier of the call that is requested to be transferred.
     * @param {module:model/SingleStepTransferData} singleStepTransferData 
     * @param {module:api/VoiceConferencesAndTransfersApi~singleStepTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.singleStepTransfer = function(id, singleStepTransferData, callback) {
      var postBody = singleStepTransferData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling singleStepTransfer");
      }

      // verify the required parameter 'singleStepTransferData' is set
      if (singleStepTransferData == undefined || singleStepTransferData == null) {
        throw new Error("Missing the required parameter 'singleStepTransferData' when calling singleStepTransfer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/single-step-transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
