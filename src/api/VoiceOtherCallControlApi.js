/**
 * Workspace Application API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/ApiSuccessResponse', 'model/Parameters16', 'model/Parameters17', 'model/Parameters18', 'model/Parameters19'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/Parameters16'), require('../model/Parameters17'), require('../model/Parameters18'), require('../model/Parameters19'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApplicationApi) {
      root.WorkspaceApplicationApi = {};
    }
    root.WorkspaceApplicationApi.VoiceOtherCallControlApi = factory(root.WorkspaceApplicationApi.ApiClient, root.WorkspaceApplicationApi.ApiErrorResponse, root.WorkspaceApplicationApi.ApiSuccessResponse, root.WorkspaceApplicationApi.Parameters16, root.WorkspaceApplicationApi.Parameters17, root.WorkspaceApplicationApi.Parameters18, root.WorkspaceApplicationApi.Parameters19);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse, Parameters16, Parameters17, Parameters18, Parameters19) {
  'use strict';

  /**
   * VoiceOtherCallControl service.
   * @module api/VoiceOtherCallControlApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VoiceOtherCallControlApi. 
   * @alias module:api/VoiceOtherCallControlApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the alternateCall operation.
     * @callback module:api/VoiceOtherCallControlApi~alternateCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alternate between calls
     * On behalf of the telephony object specified by the parameter dn, places the active call specified by the parameter current_conn_id on hold and connects the call specified by the parameter held_conn_id.
     * @param {String} id Connection identifier of the call that is requested to be connected.
     * @param {module:model/Parameters17} parameters 
     * @param {module:api/VoiceOtherCallControlApi~alternateCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.alternateCall = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling alternateCall");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling alternateCall");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/alternate-call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clearCall operation.
     * @callback module:api/VoiceOtherCallControlApi~clearCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear all the parties in the call.
     * Deletes all parties, that is, all telephony objects, from the call specified by conn_id and disconnects the call.
     * @param {String} id Connection identifier of the call, from which the telephony object in question is requested to be released.
     * @param {module:model/Parameters18} parameters 
     * @param {module:api/VoiceOtherCallControlApi~clearCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.clearCall = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling clearCall");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling clearCall");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/clear-call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reconnectCall operation.
     * @callback module:api/VoiceOtherCallControlApi~reconnectCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reconnect a call
     * Releases the telephony object specified by the parameter dn from the active call specified by the parameter current_conn_id and retrieves the previously held call, specified by the parameter held_conn_id, to the same object. This function is commonly used to clear an active call and to return to a held call, or to cancel a consult call (because of no answer, called device busy, and so on) and then to return to a held call.
     * @param {String} id Connection identifier of the original call that should be retrieved.
     * @param {module:model/Parameters16} parameters 
     * @param {module:api/VoiceOtherCallControlApi~reconnectCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.reconnectCall = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling reconnectCall");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling reconnectCall");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/reconnect-call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redirectCall operation.
     * @callback module:api/VoiceOtherCallControlApi~redirectCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redirect the call.
     * Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
     * @param {String} id Connection ID of the current call handled by the DN.
     * @param {module:model/Parameters19} parameters 
     * @param {module:api/VoiceOtherCallControlApi~redirectCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSuccessResponse}
     */
    this.redirectCall = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling redirectCall");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling redirectCall");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/redirect-call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
