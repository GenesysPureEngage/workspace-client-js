/**
 * Workspace API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['workspace/ApiClient', 'workspace/model/ApiErrorResponse', 'workspace/model/ApiSuccessResponse', 'workspace/model/Key', 'workspace/model/UserData', 'workspace/model/UserData1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/Key'), require('../model/UserData'), require('../model/UserData1'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.VoiceUserdataApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.Key, root.WorkspaceApi.UserData, root.WorkspaceApi.UserData1);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse, Key, UserData, UserData1) {
  'use strict';

  /**
   * VoiceUserdata service.
   * @module workspace/api/VoiceUserdataApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VoiceUserdataApi. 
   * @alias module:workspace/api/VoiceUserdataApi
   * @class
   * @param {module:workspace/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:workspace/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the attachUserData operation.
     * @callback module:workspace/api/VoiceUserdataApi~attachUserDataCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach user data to a call
     * @param {String} id id of the call
     * @param {module:workspace/model/UserData} userData An array of key/value pairs.
     * @param {module:workspace/api/VoiceUserdataApi~attachUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.attachUserData = function(id, userData, callback) {
      var postBody = userData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling attachUserData");
      }

      // verify the required parameter 'userData' is set
      if (userData == undefined || userData == null) {
        throw new Error("Missing the required parameter 'userData' when calling attachUserData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/attach-user-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePair operation.
     * @callback module:workspace/api/VoiceUserdataApi~deletePairCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove one key/value pair in the user data
     * @param {String} id id of the call
     * @param {module:workspace/model/Key} key The key of the key/value pairs to delete.
     * @param {module:workspace/api/VoiceUserdataApi~deletePairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.deletePair = function(id, key, callback) {
      var postBody = key;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deletePair");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling deletePair");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/delete-pair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserData operation.
     * @callback module:workspace/api/VoiceUserdataApi~updateUserDataCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user data to a call
     * @param {String} id id of the call
     * @param {module:workspace/model/UserData1} userData An array of key/value pairs.
     * @param {module:workspace/api/VoiceUserdataApi~updateUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.updateUserData = function(id, userData, callback) {
      var postBody = userData;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserData");
      }

      // verify the required parameter 'userData' is set
      if (userData == undefined || userData == null) {
        throw new Error("Missing the required parameter 'userData' when calling updateUserData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/update-user-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
