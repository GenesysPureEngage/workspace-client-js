/**
 * Workspace API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['workspace/ApiClient', 'workspace/model/ApiErrorResponse', 'workspace/model/ApiSuccessResponse', 'workspace/model/InlineResponse200', 'workspace/model/Parameters19', 'workspace/model/Parameters3', 'workspace/model/Parameters4', 'workspace/model/Parameters5', 'workspace/model/Parameters6', 'workspace/model/Parameters7'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/InlineResponse200'), require('../model/Parameters19'), require('../model/Parameters3'), require('../model/Parameters4'), require('../model/Parameters5'), require('../model/Parameters6'), require('../model/Parameters7'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.VoiceBasicCallControlApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.InlineResponse200, root.WorkspaceApi.Parameters19, root.WorkspaceApi.Parameters3, root.WorkspaceApi.Parameters4, root.WorkspaceApi.Parameters5, root.WorkspaceApi.Parameters6, root.WorkspaceApi.Parameters7);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse, InlineResponse200, Parameters19, Parameters3, Parameters4, Parameters5, Parameters6, Parameters7) {
  'use strict';

  /**
   * VoiceBasicCallControl service.
   * @module workspace/api/VoiceBasicCallControlApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VoiceBasicCallControlApi. 
   * @alias module:workspace/api/VoiceBasicCallControlApi
   * @class
   * @param {module:workspace/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:workspace/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the answer operation.
     * @callback module:workspace/api/VoiceBasicCallControlApi~answerCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Answer a call
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:workspace/model/Parameters4} opts.parameters Request parameters.
     * @param {module:workspace/api/VoiceBasicCallControlApi~answerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.answer = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling answer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/answer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dial operation.
     * @callback module:workspace/api/VoiceBasicCallControlApi~dialCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dial a new call to the specified destination
     * @param {module:workspace/model/Parameters3} parameters Request parameters.
     * @param {module:workspace/api/VoiceBasicCallControlApi~dialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.dial = function(parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling dial");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/dial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalls operation.
     * @callback module:workspace/api/VoiceBasicCallControlApi~getCallsCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the calls
     * @param {module:workspace/api/VoiceBasicCallControlApi~getCallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/InlineResponse200}
     */
    this.getCalls = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/voice/get-calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the hold operation.
     * @callback module:workspace/api/VoiceBasicCallControlApi~holdCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place a call on hold
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:workspace/model/Parameters5} opts.parameters Request parameters.
     * @param {module:workspace/api/VoiceBasicCallControlApi~holdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.hold = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling hold");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/hold', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the release operation.
     * @callback module:workspace/api/VoiceBasicCallControlApi~releaseCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release a call
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:workspace/model/Parameters7} opts.parameters Request parameters.
     * @param {module:workspace/api/VoiceBasicCallControlApi~releaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.release = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling release");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieve operation.
     * @callback module:workspace/api/VoiceBasicCallControlApi~retrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a held call
     * @param {String} id id of the call
     * @param {Object} opts Optional parameters
     * @param {module:workspace/model/Parameters6} opts.parameters Request parameters.
     * @param {module:workspace/api/VoiceBasicCallControlApi~retrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.retrieve = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling retrieve");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDTMF operation.
     * @callback module:workspace/api/VoiceBasicCallControlApi~sendDTMFCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send digits as DTMF.
     * On behalf of the telephony object specified by the parameter dn, sends digits that are expected by an interactive voice response system.
     * @param {String} id Connection identifier of the call in question.
     * @param {module:workspace/model/Parameters19} parameters 
     * @param {module:workspace/api/VoiceBasicCallControlApi~sendDTMFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.sendDTMF = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling sendDTMF");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling sendDTMF");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/send-dtmf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
