/**
 * Workspace API
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['workspace/ApiClient', 'workspace/model/ApiErrorResponse', 'workspace/model/ApiSuccessResponse', 'workspace/model/Parameters15', 'workspace/model/Parameters16', 'workspace/model/Parameters17', 'workspace/model/Parameters18'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/ApiSuccessResponse'), require('../model/Parameters15'), require('../model/Parameters16'), require('../model/Parameters17'), require('../model/Parameters18'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkspaceApi) {
      root.WorkspaceApi = {};
    }
    root.WorkspaceApi.VoiceOtherCallControlApi = factory(root.WorkspaceApi.ApiClient, root.WorkspaceApi.ApiErrorResponse, root.WorkspaceApi.ApiSuccessResponse, root.WorkspaceApi.Parameters15, root.WorkspaceApi.Parameters16, root.WorkspaceApi.Parameters17, root.WorkspaceApi.Parameters18);
  }
}(this, function(ApiClient, ApiErrorResponse, ApiSuccessResponse, Parameters15, Parameters16, Parameters17, Parameters18) {
  'use strict';

  /**
   * VoiceOtherCallControl service.
   * @module workspace/api/VoiceOtherCallControlApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VoiceOtherCallControlApi. 
   * @alias module:workspace/api/VoiceOtherCallControlApi
   * @class
   * @param {module:workspace/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:workspace/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the alternate operation.
     * @callback module:workspace/api/VoiceOtherCallControlApi~alternateCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alternate between calls
     * On behalf of the telephony object specified by the parameter dn, places the active call specified by the parameter current_conn_id on hold and connects the call specified by the parameter held_conn_id.
     * @param {String} id Connection identifier of the call that is requested to be connected.
     * @param {module:workspace/model/Parameters16} parameters 
     * @param {module:workspace/api/VoiceOtherCallControlApi~alternateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.alternate = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling alternate");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling alternate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/alternate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clear operation.
     * @callback module:workspace/api/VoiceOtherCallControlApi~clearCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear all the parties in the call.
     * Deletes all parties, that is, all telephony objects, from the call specified by conn_id and disconnects the call.
     * @param {String} id Connection identifier of the call, from which the telephony object in question is requested to be released.
     * @param {module:workspace/model/Parameters17} parameters 
     * @param {module:workspace/api/VoiceOtherCallControlApi~clearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.clear = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling clear");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling clear");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reconnect operation.
     * @callback module:workspace/api/VoiceOtherCallControlApi~reconnectCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reconnect a call
     * Releases the telephony object specified by the parameter dn from the active call specified by the parameter current_conn_id and retrieves the previously held call, specified by the parameter held_conn_id, to the same object. This function is commonly used to clear an active call and to return to a held call, or to cancel a consult call (because of no answer, called device busy, and so on) and then to return to a held call.
     * @param {String} id Connection identifier of the original call that should be retrieved.
     * @param {module:workspace/model/Parameters15} parameters 
     * @param {module:workspace/api/VoiceOtherCallControlApi~reconnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.reconnect = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling reconnect");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling reconnect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/reconnect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redirect operation.
     * @callback module:workspace/api/VoiceOtherCallControlApi~redirectCallback
     * @param {String} error Error message, if any.
     * @param {module:workspace/model/ApiSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redirect the call.
     * Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
     * @param {String} id Connection ID of the current call handled by the DN.
     * @param {module:workspace/model/Parameters18} parameters 
     * @param {module:workspace/api/VoiceOtherCallControlApi~redirectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:workspace/model/ApiSuccessResponse}
     */
    this.redirect = function(id, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling redirect");
      }

      // verify the required parameter 'parameters' is set
      if (parameters == undefined || parameters == null) {
        throw new Error("Missing the required parameter 'parameters' when calling redirect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiSuccessResponse;

      return this.apiClient.callApi(
        '/voice/calls/{id}/redirect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
